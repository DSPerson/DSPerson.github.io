<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Godot-Camera2D</title>
    <link href="DSPerson.github.io/2021/12/28/Godot01-Camera/"/>
    <url>DSPerson.github.io/2021/12/28/Godot01-Camera/</url>
    
    <content type="html"><![CDATA[<blockquote><p>camera2D 学习记录</p></blockquote><span id="more"></span><h2 id="摄像机"><a href="#摄像机" class="headerlink" title="摄像机"></a>摄像机</h2><blockquote><p>camera2D, 添加到玩家身上的时候， 运行后会发现根本没有任何效果。 这是因为场景下可能存在多个摄像机这种情况，所有默认就不是激活的状态。</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">camera</span><span class="hljs-selector-class">.make_current</span>()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>游戏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Godot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021年基金回望</title>
    <link href="DSPerson.github.io/2021/12/21/money01/"/>
    <url>DSPerson.github.io/2021/12/21/money01/</url>
    
    <content type="html"><![CDATA[<blockquote><p>总结一下2021年理财，自己给自己玩的坑。</p></blockquote><span id="more"></span><blockquote><p>有买两年基金的背景，每年基本上都是5w块不到的样子</p></blockquote><h3 id="新手死于追高、老手死于抄底"><a href="#新手死于追高、老手死于抄底" class="headerlink" title="新手死于追高、老手死于抄底"></a>新手死于追高、老手死于抄底</h3><blockquote><p>很不幸我属于老手，2021年是互联网大崩盘的一年，政策问题，导致中概股无一幸免，K12更是基本不值钱了。</p><p>我踩的很准，在高位买了两个基金 <code>易方达中证海外互联网50ETF</code>、<code>交银海外中国互联网指数</code>，自己以为不会有大问题，即使在下跌的途中，也是采用技术性定投的方式，打算分散投资，但是倾巢之下岂有完卵，到写本次记录之前已经-30%。我不知道后面还会有多少的亏损，但是这次投资给了我很大的打击，甚至我现在每天都觉得压力很大，一度想要割肉，我知道现在如果割肉我可能不会亏那么多，但是也有可能这个钱我永远也不能赚回来了。</p></blockquote><blockquote><p>但是现在我也不会再往里面投钱了，虽然我很想这么做，如果不克制，可能后面很更惨烈。后面如果真的有一天，这个钱我赚回来了，我可能会感谢之前的自己吧！ </p></blockquote><h3 id="纸上得来终觉浅，绝知此事要躬行。"><a href="#纸上得来终觉浅，绝知此事要躬行。" class="headerlink" title="纸上得来终觉浅，绝知此事要躬行。"></a>纸上得来终觉浅，绝知此事要躬行。</h3>]]></content>
    
    
    <categories>
      
      <category>夜晚</category>
      
    </categories>
    
    
    <tags>
      
      <tag>理财</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ios xcframework合成</title>
    <link href="DSPerson.github.io/2021/12/20/ios-xcframework/"/>
    <url>DSPerson.github.io/2021/12/20/ios-xcframework/</url>
    
    <content type="html"><![CDATA[<blockquote><p>编译xcframework 记录</p></blockquote><span id="more"></span><h3 id="编译xcframework"><a href="#编译xcframework" class="headerlink" title="编译xcframework"></a>编译xcframework</h3><h4 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h4><blockquote><p>target name: kdslll</p><p>project name: kdslll.xcodeproj</p><p>文件路径：/Users/zuiyou/Downloads/kdslll</p></blockquote><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><blockquote><ol><li>编译包含所有模拟器的framework</li></ol></blockquote><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livescript">xcodebuild GCC_PREPROCESSOR_DEFINITIONS=<span class="hljs-string">&#x27;$(inherited)&#x27;</span>  <span class="hljs-string">\</span><br>-sdk iphonesimulator <span class="hljs-string">\</span><br>ARCHS=<span class="hljs-string">&#x27;arm64 x86_64&#x27;</span>   <span class="hljs-string">\</span><br>CONFIGURATION_BUILD_DIR=<span class="hljs-regexp">/Users/zuiyou/Downloads/kdslll/build_simulator/</span> <span class="hljs-string">\</span><br>BUILD_LIBRARY_FOR_DISTRIBUTION=YES <span class="hljs-string">\</span><br>clean <span class="hljs-string">\</span><br>build -configuration Release <span class="hljs-string">\</span><br>-target kdslll <span class="hljs-string">\</span><br>GCC_GENERATE_DEBUGGING_SYMBOLS=YES <span class="hljs-string">\</span><br>DEBUG_INFORMATION_FORMAT=<span class="hljs-string">&quot;dwarf-with-dsym&quot;</span> <span class="hljs-string">\</span><br>-project kdslll.xcodeproj <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><ol start="2"><li>编译真机framework</li></ol></blockquote><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs livescript">xcodebuild GCC_PREPROCESSOR_DEFINITIONS=<span class="hljs-string">&#x27;$(inherited)&#x27;</span>  <span class="hljs-string">\</span><br>ARCHS=<span class="hljs-string">&#x27;arm64&#x27;</span>   <span class="hljs-string">\</span><br>CONFIGURATION_BUILD_DIR=<span class="hljs-regexp">/Users/zuiyou/Downloads/kdslll/build_mobile/</span> <span class="hljs-string">\</span><br>BUILD_LIBRARY_FOR_DISTRIBUTION=YES <span class="hljs-string">\</span><br>clean <span class="hljs-string">\</span><br>build -configuration Release <span class="hljs-string">\</span><br>-target kdslll <span class="hljs-string">\</span><br>GCC_GENERATE_DEBUGGING_SYMBOLS=YES <span class="hljs-string">\</span><br>DEBUG_INFORMATION_FORMAT=<span class="hljs-string">&quot;dwarf-with-dsym&quot;</span> <span class="hljs-string">\</span><br>-project kdslll.xcodeproj <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><blockquote><ol start="3"><li>合并</li></ol></blockquote><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">xcrun</span> <span class="hljs-string">xcodebuild</span> -<span class="hljs-built_in">create-xcframework</span> -<span class="hljs-string">framework</span> <span class="hljs-string">build_mobile</span>/<br><span class="hljs-string">kdslll</span>.<span class="hljs-string">framework</span> -<span class="hljs-string">framework</span> <span class="hljs-string">build_simulator</span>/<span class="hljs-string">kdslll</span>.<span class="hljs-string">framework</span> -<span class="hljs-string">output</span> <br><span class="hljs-string">kdslll</span>.<span class="hljs-string">xcframework</span><br></code></pre></td></tr></table></figure><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><blockquote><p>导入到项目中需要配置一下，将Embed方式修改一下</p></blockquote><p><img src="/blog/img/xcframework/xcfrmework01.png" alt="备注"></p><blockquote><p>感谢同事孙佳琪的无私奉献</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>xcframework</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Godot 技巧备忘录</title>
    <link href="DSPerson.github.io/2021/11/20/Godot/"/>
    <url>DSPerson.github.io/2021/11/20/Godot/</url>
    
    <content type="html"><![CDATA[<blockquote><p>做游戏，爱游戏，不知这次能坚持多久。</p></blockquote><span id="more"></span> <h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><h3 id="Group-分组概念"><a href="#Group-分组概念" class="headerlink" title="Group 分组概念"></a>Group 分组概念</h3><blockquote><p>如果发现玩家潜入秘密基地, 则可以使用 <code>SceneTree.call_group() </code>发出警报声来通知所有敌人:</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">get_tree</span><span class="hljs-params">()</span></span><span class="hljs-selector-class">.call_group</span>(<span class="hljs-string">&quot;enemies&quot;</span>， <span class="hljs-string">&quot;player_was_discovered&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><blockquote><p>延时1s执行</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">yield</span><span class="hljs-params">(get_tree()</span></span><span class="hljs-selector-class">.create_timer</span>(<span class="hljs-number">1.0</span>), <span class="hljs-string">&quot;timeout&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="释放"><a href="#释放" class="headerlink" title="释放"></a>释放</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#最好使用, 它会在空闲的安全的删除节点</span><br>node.queue_free()<br></code></pre></td></tr></table></figure><h3 id="碰撞"><a href="#碰撞" class="headerlink" title="碰撞"></a>碰撞</h3><blockquote><p>move_and_slide()</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> velocity = Vector(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>)<br><span class="hljs-comment">//不能 乘以 delta， 函数内部已经默认包含了此参数</span><br><span class="hljs-function"><span class="hljs-title">move_and_slide</span><span class="hljs-params">(velocity)</span></span> <br></code></pre></td></tr></table></figure><h3 id="跟随"><a href="#跟随" class="headerlink" title="跟随"></a>跟随</h3><blockquote><p>look_at简直是跟随鼠标转向的神器<br>例子： 当玩家拿着枪，鼠标的方向就是玩家瞄准的方向</p></blockquote><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 方式1 最简单的方式, 在玩家的脚本中</span><br>func <span class="hljs-constructor">_physics_process(<span class="hljs-params">delta</span>)</span>:<br>look<span class="hljs-constructor">_at(<span class="hljs-params">get_global_mouse_position</span>()</span>)<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 方式2 他们(方式1和2)其实相等</span><br>func <span class="hljs-constructor">_physics_process(<span class="hljs-params">delta</span>)</span>:<br>get<span class="hljs-constructor">_global_mouse_position()</span> - get<span class="hljs-constructor">_global_position()</span><br>rotation = dir.angle<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><blockquote><p>Area2d <a href="https://docs.godotengine.org/zh_CN/stable/tutorials/physics/using_area_2d.html#overlap-detection">文档</a></p></blockquote><ul><li><p> 区域对于子弹和其他弹丸物体来说是非常好用, 它可以击中并造成伤害, 但不需要其他物理效果, 如弹跳.</p></li><li><p> 用敌人周围的一个大圆圈区域设定为 “探测” 半径, 当玩家在该区域外时, 敌人就无法 “看到” 玩家.</p></li><li><p>“安保摄像头” - 在有多个摄像头的大型关卡中, 在每个摄像头上附加区域(area), 并在玩家进入时激活它们.</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>游戏</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Godot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令行备忘录</title>
    <link href="DSPerson.github.io/2021/11/01/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <url>DSPerson.github.io/2021/11/01/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p> 好记性不如烂笔头</p></blockquote><span id="more"></span><h1 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">vim ~<span class="hljs-string">/.bash_profile</span><br><span class="hljs-keyword">alias</span> podi=&#x27;pod install <span class="hljs-params">--verbose</span>&#x27;<br>source vim ~<span class="hljs-string">/.bash_profile</span><br></code></pre></td></tr></table></figure><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><blockquote><p>排序查看文件大小</p></blockquote><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">du -<span class="hljs-keyword">sh</span> * | <span class="hljs-keyword">sort</span> -rh<br></code></pre></td></tr></table></figure><h1 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h1><h3 id="根据UUID查询dSYM所在位置"><a href="#根据UUID查询dSYM所在位置" class="headerlink" title="根据UUID查询dSYM所在位置"></a>根据UUID查询dSYM所在位置</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">find</span> ~<span class="hljs-regexp">/Library/</span>Developer/Xcode -iname <span class="hljs-string">&#x27;*.dSYM&#x27;</span><br>-print0| xargs -<span class="hljs-number">0</span> -I % dwarfdump -u %|<span class="hljs-keyword">grep</span> -i UUID<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2020-7-19 晚</title>
    <link href="DSPerson.github.io/2021/07/19/2020-7-19-%E6%99%9A/"/>
    <url>DSPerson.github.io/2021/07/19/2020-7-19-%E6%99%9A/</url>
    
    <content type="html"><![CDATA[<blockquote><p><del>Github</del> Gitee 真香理论是永远不会过时的.</p></blockquote><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>夜晚</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LLVM</title>
    <link href="DSPerson.github.io/2021/07/19/llvm/"/>
    <url>DSPerson.github.io/2021/07/19/llvm/</url>
    
    <content type="html"><![CDATA[<blockquote><p>llvm 记录</p></blockquote><span id="more"></span><blockquote><p>词法分析<br><code>clang -fmodules -fsyntax-only -Xclang -dump-tokens main.m</code></p></blockquote><blockquote><p>语法分析生成AST(抽象语法树)<br><code>clang -fmodules -fsyntax-only -Xclang -ast-dump main.m</code></p></blockquote><blockquote><p>无优化的代码（O0）<br> clang -S -fobjc-arc -emit-llvm main.m -o main00.ll</p></blockquote><blockquote><p>优化代码(Os)<br>clang -Os -S -fobjc-arc -emit-llvm main.m -o mainOs.ll  //  Os 最快最小</p></blockquote><blockquote><p>Bitcode优化<br>clang -emit-llvm -c main.ll -o main.bc</p></blockquote><blockquote><p>生成汇编<br>clang -S -fobjc-arc main.bc -o mainbc.s</p></blockquote><blockquote><p>生成目标文件（Object）此时已经被转换为机器码但是不能被执行（需要将所有资源链接起来才可以）<br>clang -fmodules -c main.s -o main.o</p></blockquote><blockquote><p>xcrun 查看目标文件符号<br>xcrun nm -nm main.o</p></blockquote><blockquote><p>生成可执行文件（链接）<br>clang main.o -o main<br>此时继续使用xcrun可以看到undefined 已经被指明了来源库</p></blockquote><p><img src="/blog/img/llvm/12857030-6c86ad63332ee60e.png" alt="流程"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序问题总结</title>
    <link href="DSPerson.github.io/2018/10/09/WX-IDE/"/>
    <url>DSPerson.github.io/2018/10/09/WX-IDE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>早期尝试 微信小程序</p></blockquote><span id="more"></span><blockquote><p>我是做iOS开发的，很多人都会说这个微信小程序又是动态的，我不反对苹果对动态的讨厌，毕竟这样很容易不受控制，但是<a href="http://reactnative.cn/">ReactNative(中文网)</a>不是还活的好好的吗(貌似版本到了0.33了)!而且我觉得可以学个大概万一真用到的时候也不至于无所适从(我先做个非常简陋的电商类，完事后放到下面)。学习！学习！学习！才不会被淘汰。</p></blockquote><blockquote><p>申明 ：会将我认为是问题的问题记录下来，如果您觉得太简单可以关掉。并且我是边做小程序边写的这个博客，会一直更新，！！！MAC环境</p></blockquote><blockquote><p>我可以说不太懂微信小程序的语言。它使用XML+JS ，不支持HTML5，兼容部分CSS写法(从这个句号到这句话完事我是抄来的，因为我不懂XML和JS)。不懂但是不能开发吗？我觉得语言都是相通的，还好之前做了<code>React Native </code>项目(总觉得很相似)，上手小程序也很快。</p></blockquote><blockquote><p>ps: 很冷清。。。我知道我是菜鸟</p></blockquote><h2 id="从头开始-开始一个项目"><a href="#从头开始-开始一个项目" class="headerlink" title="从头开始 - 开始一个项目"></a>从头开始 - 开始一个项目</h2><h3 id="工具下载安装"><a href="#工具下载安装" class="headerlink" title="工具下载安装"></a>工具下载安装</h3><p><a href="https://servicewechat.com/wxa-dev-logic/download_redirect?type=darwin&from=mpwiki&t=1475052055457">微信小程序开发者工具下载</a></p><ul><li>开发工具缺少appid问题，这个只要破解就可以了(<a href="http://blog.csdn.net/chenqiuge1984/article/details/52692394">引用 一</a>) </li></ul><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><ul><li>不清楚是开发工具的原因还是怎么回事，说好新建一个项目会有一个QuickStart的，然而我并没有所以打开就是这个样子的</li></ul><p><img src="/blog/img/WX-IDE/startError.png" alt="11"></p><ul><li>只能从官网下载一个<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/demo/quickstart.zip?t=1475052047016">HelloWorld</a>直接放大开采创建的项目路径下面</li></ul><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p><img src="/blog/img/WX-IDE/appDetail.png" alt="默认的"><br>默认就几个文件剩下的就是目录再加上不同名字的这个几个文件当然还得加上.wxml，这个文件就是来书写界面的</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>app.json</p><p><img src="/blog/img/WX-IDE/appJson.png"></p><ul><li>pages : 应该就是项目加载文件的入口(用应该的原因是我不确定)，如果此处不加载的话后面用了也是不会有所显示的(这里是确定的如果不信可以尝试)。</li><li>window : 程序的窗口</li><li>tabBar : 很好理解就是标签栏(App下面负责切换不同界面)</li></ul><h2 id="需记录问题"><a href="#需记录问题" class="headerlink" title="需记录问题"></a>需记录问题</h2><h3 id="scroll-view"><a href="#scroll-view" class="headerlink" title="scroll-view"></a>scroll-view</h3><h4 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h4><ul><li>横向需要给scroll-view 一个高度<code>height: 200px</code>文档上是这么说的但是scroll-view中元素设置高度就可以将scroll-view撑起来了</li></ul><h4 id="只展示第一个元素滑动无效"><a href="#只展示第一个元素滑动无效" class="headerlink" title="只展示第一个元素滑动无效"></a>只展示第一个元素滑动无效</h4><ul><li><p>scroll-view需要设置<code>white-space: nowrap;</code>(百度一下:文本不会换行，文本会在在同一行上继续，直到遇到 <br> 标签为止。)</p></li><li><p>子元素设置<code>display:inline-block</code>(百度一下:让一个元素具有“区块元素”的属性（可以设置width和height），又具有“内联元素”的属性（不产生换行))</p></li></ul><p>这样scroll-view可以正常展示了</p><blockquote><p>问题：但是scroll-view如果绑定<code>wx:for = &#39;&#123;&#123;数据&#125;&#125;&#39;</code>子类中有一个view 他一直都是<code>column</code>排列不会是<code>row</code>排列。希望有人帮解决</p></blockquote><p>针对上面问题 我只能用<code>swiper</code>来解决暂时未想到办法.</p><p>发布于2016-10-2日 </p><p><a href="https://github.com/DSPerson/wx-demo">自己做的demo很丑但是希望给星</a></p><p><a href="http://blog.csdn.net/chenqiuge1984/article/details/52692394">引用 一</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS WebRTC 使用</title>
    <link href="DSPerson.github.io/2017/09/29/webRTC/"/>
    <url>DSPerson.github.io/2017/09/29/webRTC/</url>
    
    <content type="html"><![CDATA[<blockquote><p>早期使用webRTC 问题记录, 后来留下的问题都经过升级版本得到解决，这篇文章意义不是很大了</p></blockquote><span id="more"></span><blockquote><p>这段项目使用WebRTC 的经验,拿出来分享(提醒, 原理部分请看特别感谢. 基础部分会使用模拟代码)<br>本文包含音视频和RTCDataChannel</p></blockquote><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li>Turn Server (47.93.21.132:3478)<blockquote><p>用来打洞的服务器, 这个是我自己搭建的,  可以使用谷歌的(需要梯子. stun:stun.l.google.com:19302)<br>用户名: u1<br>密码: p1</p></blockquote><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs haskell">// 代码注解<br><span class="hljs-type">NSArray</span> *<span class="hljs-class"><span class="hljs-keyword">data</span> = @[@&quot;turn:139.199.190.85:3478&quot; ,@&quot;stun:139.199.190.85:3478&quot;];//服务器</span><br><span class="hljs-title">_stunServerArray</span> = [<span class="hljs-type">NSMutableArray</span> arrayWithCapacity:<span class="hljs-class"><span class="hljs-keyword">data</span>.count];//全局变量</span><br>[<span class="hljs-class"><span class="hljs-keyword">data</span> enumerateObjectsUsingBlock:^(<span class="hljs-type">NSString</span> * <span class="hljs-title">_Nonnull</span> <span class="hljs-title">obj</span>, <span class="hljs-type">NSUInteger</span> <span class="hljs-title">idx</span>, <span class="hljs-type">BOOL</span> * <span class="hljs-title">_Nonnull</span> <span class="hljs-title">stop</span>) &#123;</span><br><span class="hljs-class">        <span class="hljs-type">NSURL</span> *<span class="hljs-title">url</span> = [<span class="hljs-type">NSURL</span> <span class="hljs-type">URLWithString</span>:<span class="hljs-title">obj</span>];</span><br><span class="hljs-class">        <span class="hljs-type">RTCICEServer</span> *<span class="hljs-title">server</span> = [[<span class="hljs-type">RTCICEServer</span> <span class="hljs-title">alloc</span>] <span class="hljs-title">initWithURI</span>:<span class="hljs-title">url</span> <span class="hljs-title">username</span>:@&quot;<span class="hljs-title">u1</span>&quot; <span class="hljs-title">password</span>:@&quot;<span class="hljs-title">p1</span>&quot;]];</span><br><span class="hljs-class">        <span class="hljs-title">if</span> (<span class="hljs-title">server</span>) &#123;</span><br><span class="hljs-class">            [<span class="hljs-title">self</span>.<span class="hljs-title">stunServerArray</span> <span class="hljs-title">addObject</span>:<span class="hljs-title">server</span>];</span><br><span class="hljs-class">        &#125;</span><br>&#125;];<br></code></pre></td></tr></table></figure></li><li>个人服务器<blockquote><p>用来交换A和B的打洞信息(全文都是模拟A给B发送消息. 信息包括但不仅限于sdp、 ICE Candidate…)<br>采用TCP(注意粘包问题.  <strong>本文采用</strong>), WebSocket方式都可以. 亦可以采用Socket加Http请求方式.即时即可</p></blockquote></li><li>WebRTC库<blockquote><p>一个外国人编译好的. 直接pod 使用</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">pod</span> <span class="hljs-string">&#x27;libjingle_peerconnection&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="项目阶段"><a href="#项目阶段" class="headerlink" title="项目阶段"></a>项目阶段</h1><blockquote><p>单例类</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">+ (<span class="hljs-keyword">instancetype</span>)shareInstance &#123;<br>    <span class="hljs-keyword">static</span> DSWebRTCManager *manager = <span class="hljs-literal">nil</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-built_in">dispatch_once_t</span> onceToken;<br>    <span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^&#123;<br>        manager = [[DSWebRTCManager alloc] init];<br>        [manager setup];<br>    &#125;);<br>    <span class="hljs-keyword">return</span> manager;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SDP"><a href="#SDP" class="headerlink" title="SDP"></a>SDP</h2></li></ul><ol><li>加载准备阶段Turn Server</li><li>创建唯一的P2P工厂<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp">- (<span class="hljs-keyword">void</span>)setup &#123;<br>    [<span class="hljs-meta">RTCPeerConnectionFactory initializeSSL</span>];<br>    _factory = [[RTCPeerConnectionFactory alloc] <span class="hljs-keyword">init</span>];<span class="hljs-comment">//全局变量.</span><br>    _isInititor = <span class="hljs-literal">false</span>;<span class="hljs-comment">//这个需要用来判断是否是发起者. 收到init 方为false. 收到answerInit为true. </span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><strong>本文采用方式:</strong> 可以想象为A给B发送视频/音频聊天请求, B收到请求后(类型:init)进行判断是否同意, 同意返回同意(类型:answerInit). 否则返回关闭(类型:Bye). 双方关闭音视频, 处理掉相关缓存. 此种方式在音视频方便尤为重要</p></blockquote></li><li>A给B发送消息准备发送音视频消息(本文采用TCP, B是否在线是可以得到的. 而且双方都必须在线才可以. 此处不做代码注解, 即发送TCP消息.B解析出来即可. 发送类型为init)</li><li>假设B同意的情况下. 收到消息使用TCP返回同意消息(answerInit)<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"> @weakify(self);<br>[self.delegate dspersonReceiveInvitationVideoWithOther:other agree:^(BOOL isAgree) &#123;<br>               @strongify(self);<br>                <span class="hljs-keyword">if</span> (isAgree) &#123;<br>                <span class="hljs-regexp">//</span>同意 发送tcp消息<br>                <span class="hljs-regexp">//</span>模拟代码<br>                <span class="hljs-regexp">//</span>[_tcp send:init(同意)];<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                 <span class="hljs-regexp">//</span>发送Bye<br>                   <span class="hljs-regexp">//</span>[_tcp send:Byet(不同意)];<br>                &#125;<br>&#125;];<br></code></pre></td></tr></table></figure></li><li>A收到B发送的同意信息</li></ol><ul><li>创建RTCPeerConnection<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">RTCPeerConnection *connection = [_factory peerConnectionWithICEServers:stunServerArray <br>                                                           constraints:[self peerConnectionConstraints]  <br>                                                              delegate:self];<span class="hljs-regexp">//</span>根据约束创建. 并且将RTCPeerConnection代理RTCPeerConnectionDelegate放在self中<br><span class="hljs-regexp">//</span>全局变量.可以不定义成全局变量. 添加到数组中(本文为了需要改为全局<br><span class="hljs-regexp">//</span>方便使用.⚠️⚠️⚠️ 如果你添加到数组中, 从数组中删除中前,一定要先调用 [connection close]; 否则崩溃)<br>_peerConnection = connection;<br><br></code></pre></td></tr></table></figure></li><li>创建RTCPeerConnection的的约束<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs prolog">- (<span class="hljs-symbol">RTCMediaConstraints</span> *)peerConnectionConstraints &#123;<br>    <span class="hljs-symbol">RTCPair</span> *pair = [[<span class="hljs-symbol">RTCPair</span> alloc] initWithKey:@<span class="hljs-string">&quot;DtlsSrtpKeyAgreement&quot;</span> value:@<span class="hljs-string">&quot;true&quot;</span>];//这个是定义好的.不能更改<br>    <span class="hljs-symbol">RTCMediaConstraints</span> *constraints = [[<span class="hljs-symbol">RTCMediaConstraints</span> alloc] initWithMandatoryConstraints:nil <br>                                                                             optionalConstraints:@[pair]];<br>    return constraints;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="4"><li>创建本地SDP<figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gml"><span class="hljs-comment">//会调用RTCPeerConnection 代理 RTCSessionDescriptionDelegate</span><br>[_peerConnection createOfferWithDelegate:<span class="hljs-literal">self</span> constraints:[<span class="hljs-literal">self</span> defaultOfferConstraints]];<br></code></pre></td></tr></table></figure></li></ol><ul><li>Offer约束<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs prolog">- (<span class="hljs-symbol">RTCMediaConstraints</span> *)defaultOfferConstraints &#123;<br>    <span class="hljs-symbol">NSArray</span> *mandatoryConstraints = @[<br>                                      [[<span class="hljs-symbol">RTCPair</span> alloc] initWithKey:@<span class="hljs-string">&quot;OfferToReceiveAudio&quot;</span> value:@<span class="hljs-string">&quot;true&quot;</span>],//是否含有音频<br>                                      [[<span class="hljs-symbol">RTCPair</span> alloc] initWithKey:@<span class="hljs-string">&quot;OfferToReceiveVideo&quot;</span> value:@<span class="hljs-string">&quot;true&quot;</span>]//是否含有视频<br>                                      ];<br>    <span class="hljs-symbol">RTCMediaConstraints</span>* constraints =<br>    [[<span class="hljs-symbol">RTCMediaConstraints</span> alloc]<br>     initWithMandatoryConstraints:mandatoryConstraints<br>     optionalConstraints:nil];<br>    return constraints;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>详解RTCSessionDescriptionDelegate<blockquote><p>RTCSessionDescriptionDelegate 有两个回调</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>创建本地SDP时候, 会调用<br><span class="hljs-regexp">//</span> 代理方法<span class="hljs-number">2</span><br>- (void)peerConnection:(RTCPeerConnection *)peerConnection<br>    didCreateSessionDescription:(RTCSessionDescription *)sdp<br>                          error:(NSError *)error &#123;<br>   <span class="hljs-regexp">//</span><span class="hljs-number">0</span>.判断是否出现错误<br>   <span class="hljs-keyword">if</span> (error) &#123;<br>           <span class="hljs-regexp">//</span> DSpersonKitLog(@<span class="hljs-string">&quot;\n😂😂😂😂😂😂😂😂发送本地SDP 出现错误😂😂😂😂😂😂😂😂\n%@&quot;</span>, error);<br>           <span class="hljs-regexp">//</span> 出现错误就要给对方发送Bye<br>           <span class="hljs-regexp">//</span>[_tcp send:Bye]; <br>            return;<br>    &#125;<br>       <span class="hljs-regexp">//</span><span class="hljs-number">1</span>. 设置本地SDP. 调用此方法回调用代理方法<span class="hljs-number">2</span>. WebRTC会进行内部保存,此时的代理<span class="hljs-number">2</span>的方法根A其实已经没任何关系了<br>       <span class="hljs-regexp">//</span> <span class="hljs-number">2</span>. B创建Answer sdp发送 给A也会调用代理<span class="hljs-number">2</span> peerConnection.signalingState 状态已经发生改变.所以不会出现死循环问题<br>      [_peerConnection setLocalDescriptionWithDelegate:self sessionDescription:sdp];<br>      <span class="hljs-regexp">//</span><span class="hljs-number">2</span>. 发送SDP给对方<br>      <span class="hljs-regexp">//</span>[ _tcp send:sdp];<br>&#125;<br><span class="hljs-regexp">//</span> 代理方法<span class="hljs-number">2</span><br>- (void)peerConnection:(RTCPeerConnection *)peerConnection<br>    didSetSessionDescriptionWithError:(NSError *)error &#123;<br>    <span class="hljs-regexp">//</span><span class="hljs-number">0</span>.判断是否出现错误<br>   <span class="hljs-keyword">if</span> (error) &#123;<br>           <span class="hljs-regexp">//</span> DSpersonKitLog(@<span class="hljs-string">&quot;\n😂😂😂😂😂😂😂😂发送本地SDP 出现错误😂😂😂😂😂😂😂😂\n%@&quot;</span>, error);<br>           <span class="hljs-regexp">//</span> 出现错误就要给对方发送Bye<br>           <span class="hljs-regexp">//</span>[_tcp send:Bye]; <br>            return;<br>    &#125;<br>   <span class="hljs-regexp">//</span>B正在回答A,远程Offer. 我们需要创建的answer, 和一个本地描述()<br>        <span class="hljs-keyword">if</span> (!_isInititor &amp;&amp; peerConnection.signalingState == RTCSignalingHaveRemoteOffer) &#123;<br>            <span class="hljs-regexp">//</span> DSpersonKitLog(@<span class="hljs-string">&quot;接收到远端发来的Offer, 创建本地Answer&quot;</span>);<br>            <span class="hljs-regexp">//</span>他应该在SetRemoteDescription之后调用, 否则报错. <br>            <span class="hljs-regexp">//</span>创建完会调用代理<span class="hljs-number">1</span>. 给A发送Answer<br>            [_peerConnection createAnswerWithDelegate:self constraints:[self defaultOfferConstraints]];<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="5"><li>B收到Offer <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>创建远程SDP. 会调用RTCSessionDescriptionDelegate 代理<span class="hljs-number">2</span>. 此时_isInititor = false<br>[_peerConnection setRemoteDescriptionWithDelegate:self sessionDescription:sdp];<br><span class="hljs-regexp">//</span>sdp 是收到消息出来并创建的解析创建的RTCSessionDescription<br></code></pre></td></tr></table></figure></li></ol><ul><li>SDP 创建<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada">+ (RTCSessionDescription *)ds_descriptionFromDictionary:(NSDictionary *)dic &#123;<br>    <span class="hljs-keyword">if</span> (!dic) &#123;<br>        <span class="hljs-keyword">return</span> nil;<br>    &#125;<br>    NSString *<span class="hljs-keyword">type</span> <span class="hljs-type">= </span>dic[@<span class="hljs-string">&quot;type&quot;</span>];<br>    NSString *sdp = dic[@<span class="hljs-string">&quot;sdp&quot;</span>];<br>    <span class="hljs-keyword">return</span> [[RTCSessionDescription alloc] initWithType:<span class="hljs-keyword">type</span> <span class="hljs-type">sdp:sdp];</span><br><span class="hljs-type"></span>&#125;<br></code></pre></td></tr></table></figure></li></ul><ol start="6"><li>A收到Answer.<blockquote><p>和B一样收到answer 要添加到远程sdp 中.方法同 步骤5. 但是<code>_isInititor = true</code>. 会调用RTCSessionDescriptionDelegate 代理2方法.但是没有实际效果.</p></blockquote></li></ol><h2 id="ICECandidat"><a href="#ICECandidat" class="headerlink" title="ICECandidat"></a>ICECandidat</h2><blockquote><p>ICECandidat 主要和 位于RTCPeerConnectionDelegate 此代理中. 暂时讲解几个此处需要的. 无需主动调用.</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>代理<span class="hljs-number">1</span>: 新的 ICE Candidate 被发现时调用 需要将信息返回给Socket服务器<br>- (void)peerConnection:(RTCPeerConnection *)peerConnection<br>       gotICECandidate:(RTCICECandidate *)candidate &#123;<br>      <span class="hljs-regexp">//</span> 需要将这些ice 发给对方客户端<br>      <span class="hljs-regexp">//</span>[_tcp send:candidate]<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>A或者B.收到ICE Candidate<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[_peerConnection addICECandidate:ice_candidate]</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//代理2: 状态变化</span><br>- (void)peerConnection:<span class="hljs-type"></span>(RTCPeerConnection *)peerConnection<br>  iceConnectionChanged:<span class="hljs-type"></span>(RTCICEConnectionState)<span class="hljs-keyword">new</span><span class="hljs-type">State</span>  &#123;<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">new</span><span class="hljs-type">State</span>) &#123;<br>                <span class="hljs-keyword">case</span> RTCICEConnectionConnected:<span class="hljs-type"></span><br>                &#123;<br>                        <span class="hljs-comment">//除了这个别的都是没打开的状态</span><br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> RTCICEConnectionFailed:<span class="hljs-type"></span><br>                &#123;<br>                        <span class="hljs-comment">//这个状态就可以发送Bye了</span><br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="媒体"><a href="#媒体" class="headerlink" title="媒体"></a>媒体</h2><blockquote><p>媒体流<code>_meidaStream</code>全局变量</p></blockquote><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sqf">- (RTCMediaStream *)meidaStream &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">_meidaStream</span>) &#123;<br>        <span class="hljs-variable">_meidaStream</span> = [<span class="hljs-variable">_factory</span> mediaStreamWithLabel:@<span class="hljs-string">&quot;ARDAMS&quot;</span>];<span class="hljs-comment">//`ARDAMS`固定就这么写</span><br>    &#125;<br>    return <span class="hljs-variable">_meidaStream</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><ol><li>创建<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//position : AVCaptureDevicePosition. 摄像头方向</span><br>RTCVideoTrack *videoTrack = [self createVideoTrackWithDirecion:position];<br></code></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (RTCVideoTrack *)createVideoTrackWithDirecion:(<span class="hljs-built_in">AVCaptureDevicePosition</span>)position &#123;<br>    RTCVideoTrack *localVideoTrack = <span class="hljs-literal">nil</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> !TARGET_IPHONE_SIMULATOR &amp;&amp; TARGET_OS_IPHONE</span><br>    <span class="hljs-comment">//更新方法. 和网上大多创建方法不同.</span><br>    localVideoTrack = [[RTCVideoTrack alloc] initWithFactory:_factory source:<span class="hljs-keyword">self</span>.source trackId:<span class="hljs-string">@&quot;AVAMSv0&quot;</span>];<span class="hljs-comment">//AVAMSv0不能更改</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>    <span class="hljs-keyword">return</span> localVideoTrack;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p><code>self.source</code> 懒加载的方式创建</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">- (RTCAVFoundationVideoSource *)source &#123;<br>    <span class="hljs-keyword">if</span> (!_source) &#123;<br>        _source = [[RTCAVFoundationVideoSource alloc] initWithFactory:_factory constraints:[self defaultMediaStreamConstraints]];<br>        <span class="hljs-regexp">//</span>_source.captureSession.sessionPreset = AVCaptureSessionPreset1280x720;<br><span class="hljs-regexp">//</span>        <span class="hljs-keyword">if</span> ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone)<br><span class="hljs-regexp">//</span>            [_source.captureSession setSessionPreset:AVCaptureSessionPreset640x480];<br><span class="hljs-regexp">//</span>        <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-regexp">//</span>            [_source.captureSession setSessionPreset:AVCaptureSessionPresetPhoto];<br><span class="hljs-regexp">//</span>        &#125;<br>    &#125;<br>    return _source;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>媒体约束. 这是安卓给我的.. 添不添加 效果感觉不出来😓</p></blockquote><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs prolog">- (<span class="hljs-symbol">RTCMediaConstraints</span> *)defaultMediaStreamConstraints &#123;<br>    <span class="hljs-symbol">RTCPair</span> *width = [[<span class="hljs-symbol">RTCPair</span> alloc] initWithKey:@<span class="hljs-string">&quot;MAX_VIDEO_WIDTH_CONSTRAINT&quot;</span> value:@<span class="hljs-string">&quot;maxWidth&quot;</span>];<br>    <span class="hljs-symbol">RTCPair</span> *height = [[<span class="hljs-symbol">RTCPair</span> alloc] initWithKey:@<span class="hljs-string">&quot;MAX_VIDEO_HEIGHT_CONSTRAINT&quot;</span> value:@<span class="hljs-string">&quot;maxHeight&quot;</span>];<br>    <span class="hljs-symbol">RTCPair</span> *rate = [[<span class="hljs-symbol">RTCPair</span> alloc] initWithKey:@<span class="hljs-string">&quot;MAX_VIDEO_FPS_CONSTRAINT&quot;</span> value:@<span class="hljs-string">&quot;maxFrameRate&quot;</span>];<br>    return [[<span class="hljs-symbol">RTCMediaConstraints</span> alloc] initWithMandatoryConstraints:nil optionalConstraints:@[width, height, rate]];<br>&#125;<br></code></pre></td></tr></table></figure></li><li>添加到媒体流中<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[self.meidaStream addVideoTrack:videoTrack]</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h3></li><li>创建音频并添加到媒体流中<figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs profile"> RTCAudioTrack *audio = [kApp.factory audioTrackWithID:@<span class="hljs-string">&quot;ARDAMSa0&quot;</span>];<br>[self.meidaStream addAudioTrack:audio];<br></code></pre></td></tr></table></figure><h3 id="添加到P2P通道中"><a href="#添加到P2P通道中" class="headerlink" title="添加到P2P通道中"></a>添加到P2P通道中</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[_peerConnection addStream:self.meidaStream]</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="接收音视频"><a href="#接收音视频" class="headerlink" title="接收音视频"></a>接收音视频</h3><blockquote><p>回到RTCPeerConnectionDelegate代理中</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">- (void)peerConnection:(RTCPeerConnection *)peerConnection<br>           addedStream:(RTCMediaStream *)stream  &#123;<br>        <span class="hljs-regexp">//</span>收到远程流.RTCMediaStream这类中包含audioTracks, videoTracks. <br>        <span class="hljs-regexp">//</span>拿到视频流. 这流需要使用RTCEAGLVideoView 这类来渲染.使用起来很简单. 但是记得<br>        <span class="hljs-regexp">//</span>- (void)videoView:(RTCEAGLVideoView*)videoView didChangeVideoSize:(CGSize)size; 这个回调<br>        <span class="hljs-regexp">//</span>当改变尺寸时候会调用.调用时机为初始化调用一次.每次改变尺寸调用.比如说技巧问题的时候<br>        <span class="hljs-regexp">//</span>可以使用代理发送到界面上.这也是真正意义上音视频打洞完成.<br>        RTCVideoTrack *videoTrack = [stream.videoTracks firstObject];<br>        <span class="hljs-regexp">//</span>音频流不用拿到,直接播放就可以了<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>提供size改变部分代码</p></blockquote><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">- (<span class="hljs-keyword">void</span>)videoView:(RTCEAGLVideoView *)videoView didChangeVideoSize:(<span class="hljs-built_in">CGSize</span>)size &#123;<br>    <span class="hljs-built_in">UIDeviceOrientation</span> orientation = [[<span class="hljs-built_in">UIDevice</span> currentDevice] orientation];<br>    [<span class="hljs-built_in">UIView</span> animateWithDuration:<span class="hljs-number">0.4</span>f animations:^&#123;<br>        <span class="hljs-built_in">CGFloat</span> containerWidth = <span class="hljs-keyword">self</span>.view.frame.size.width;<br>        <span class="hljs-built_in">CGFloat</span> containerHeight = <span class="hljs-keyword">self</span>.view.frame.size.height;<br>        <span class="hljs-built_in">CGSize</span> defaultAspectRatio = <span class="hljs-built_in">CGSizeMake</span>(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">if</span> (videoView == <span class="hljs-keyword">self</span>.localView) &#123;<br>            <span class="hljs-keyword">self</span>.localVideoSize = size;<br>            <span class="hljs-built_in">CGSize</span> aspectRatio = <span class="hljs-built_in">CGSizeEqualToSize</span>(size, <span class="hljs-built_in">CGSizeZero</span>) ? defaultAspectRatio : size;<br>            <span class="hljs-built_in">CGRect</span> videoRect = <span class="hljs-keyword">self</span>.view.bounds;<br>            <span class="hljs-built_in">CGRect</span> videoFrame = <span class="hljs-built_in">AVMakeRectWithAspectRatioInsideRect</span>(aspectRatio, videoRect);<br>            <span class="hljs-built_in">CGFloat</span> scaleView = videoFrame.size.width/videoFrame.size.height;<br>            <span class="hljs-built_in">CGFloat</span> endWidth = kDeviceHeight*scaleView;<br>            videoFrame.size.width =endWidth;<br>            videoFrame.size.height = kDeviceHeight;<br>            [<span class="hljs-keyword">self</span>.locaViewTopConstraint setConstant:containerHeight/<span class="hljs-number">2.0</span>f - videoFrame.size.height/<span class="hljs-number">2.0</span>f];<br>            [<span class="hljs-keyword">self</span>.locaViewBottomConstraint setConstant:containerHeight/<span class="hljs-number">2.0</span>f - videoFrame.size.height/<span class="hljs-number">2.0</span>f];<br>            [<span class="hljs-keyword">self</span>.locaViewLeftConstraint setConstant:containerWidth/<span class="hljs-number">2.0</span>f - videoFrame.size.width/<span class="hljs-number">2.0</span>f]; <span class="hljs-comment">//center</span><br>            [<span class="hljs-keyword">self</span>.locaViewRightConstraint setConstant:containerWidth/<span class="hljs-number">2.0</span>f - videoFrame.size.width/<span class="hljs-number">2.0</span>f]; <span class="hljs-comment">//center</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (videoView == <span class="hljs-keyword">self</span>.remoteView) &#123;<br>            <span class="hljs-keyword">self</span>.remoteVideoSize = size;<br>            <span class="hljs-built_in">CGSize</span> aspectRatio = <span class="hljs-built_in">CGSizeEqualToSize</span>(size, <span class="hljs-built_in">CGSizeZero</span>) ? defaultAspectRatio : size;<br>            <span class="hljs-built_in">CGRect</span> videoRect = <span class="hljs-keyword">self</span>.view.bounds;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">self</span>.remoteVideoTrack) &#123;<br>                videoRect = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0.0</span>f, <span class="hljs-number">0.0</span>f, <span class="hljs-keyword">self</span>.view.frame.size.width/<span class="hljs-number">4.0</span>f, <span class="hljs-keyword">self</span>.view.frame.size.height/<span class="hljs-number">4.0</span>f);<br>                <span class="hljs-keyword">if</span> (orientation == <span class="hljs-built_in">UIDeviceOrientationLandscapeLeft</span> || orientation == <span class="hljs-built_in">UIDeviceOrientationLandscapeRight</span>) &#123;<br>                    videoRect = <span class="hljs-built_in">CGRectMake</span>(<span class="hljs-number">0.0</span>f, <span class="hljs-number">0.0</span>f, <span class="hljs-keyword">self</span>.view.frame.size.height/<span class="hljs-number">4.0</span>f, <span class="hljs-keyword">self</span>.view.frame.size.width/<span class="hljs-number">4.0</span>f);<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">CGRect</span> videoFrame = <span class="hljs-built_in">AVMakeRectWithAspectRatioInsideRect</span>(aspectRatio, videoRect);<br>            <br>            <span class="hljs-comment">//Resize the localView accordingly</span><br>            [<span class="hljs-keyword">self</span>.remoteVideoWidthLayout setConstant:videoFrame.size.width];<br>            [<span class="hljs-keyword">self</span>.remoteVideoHeightLayout setConstant:videoFrame.size.height];<br>        &#125;<br>        [<span class="hljs-keyword">self</span>.view layoutIfNeeded];<br>    &#125;];<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="RTCDataChannel"><a href="#RTCDataChannel" class="headerlink" title="RTCDataChannel"></a>RTCDataChannel</h2><blockquote><p>建立互相发送的通道.发送数据类型为<code>NSData</code>. 经过测试数据单次发送大于为<code>20m</code> 左右. 但是会分三次发送.如果超出<code>RTCDataChannel</code> 会直接断开.<code>RTCDataChannel</code> 单次发送量大约为<code>6M</code>左右.<br>这里面存在一个坑. 安卓和iOS都出现了此问题具体原因不明,这个也是大部分童鞋, RTCDataChannel不能打通的原因</p></blockquote></li><li>创建<blockquote><p>和音视频很像, 只需要创建<code>_peerConnection</code> 添加进去即可. </p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>注释部分是参数填写, 可以不必填写.<br><span class="hljs-regexp">//</span>    RTCDataChannelInit *datainit = [[RTCDataChannelInit alloc] init];<br><span class="hljs-regexp">//</span>    datainit.isNegotiated = YES;<br><span class="hljs-regexp">//</span>    datainit.isOrdered = YES;<br><span class="hljs-regexp">//</span>    datainit.maxRetransmits = <span class="hljs-number">30</span>;<br><span class="hljs-regexp">//</span>    datainit.maxRetransmitTimeMs = <span class="hljs-number">30000</span>;<br><span class="hljs-regexp">//</span>    datainit.streamId = <span class="hljs-number">1</span>;<br>RTCDataChannelInit *config = [[RTCDataChannelInit alloc] init];<br>config.isOrdered = YES;<br><span class="hljs-regexp">//</span>_peerConnection 在此时必须已经创建了<br>_dataChannel = [_peerConnection createDataChannelWithLabel:@<span class="hljs-string">&quot;commands&quot;</span> config:config];<br>_dataChannel.delegate = self;<span class="hljs-regexp">//</span>RTCDataChannelDelegate<br></code></pre></td></tr></table></figure></li><li>发送消息<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">NSData *data = [@<span class="hljs-string">&quot;Hello World!&quot;</span> dataUsingEncoding:NSUTF8StringEncoding];<br>RTCDataBuffer *buffer =  [[RTCDataBuffer alloc] initWithData:data isBinary:<span class="hljs-literal">false</span>];<span class="hljs-comment">//这个地方一定要选false. 安卓那边要求.具体不明</span><br>[_dataChannel sendData:buffer];<br></code></pre></td></tr></table></figure></li><li>RTCDataChannelDelegate 详解<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//代理1 判断是否打开成功</span><br>- (<span class="hljs-keyword">void</span>)channelDidChangeState:(RTCDataChannel *)channel &#123;<br><span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (channel.state) &#123;<br>                <br>            <span class="hljs-keyword">case</span> kRTCDataChannelStateOpen:<br>               <span class="hljs-comment">// DSpersonKitLog(@&quot;DataChannel 通道打开&quot;);</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> kRTCDataChannelStateClosing:<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> kRTCDataChannelStateClosed:<br>                <span class="hljs-comment">//DSpersonKitLog(@&quot;DataChannel 关闭&quot;);</span><br>            &#123;<br>               [_tcp send:Bye];<span class="hljs-comment">//发送失败了</span><br>            &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> kRTCDataChannelStateConnecting:<br>               <span class="hljs-comment">// DSpersonKitLog(@&quot;DataChannel 正在开启&quot;);</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>&#125;<br>- (<span class="hljs-keyword">void</span>)channel:(RTCDataChannel*)channel<br>didReceiveMessageWithBuffer:(RTCDataBuffer*)buffer &#123;<br>  <span class="hljs-comment">//收到RTCDataChannel对面发送过来的消息. 自己去解析就好</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li>关闭<blockquote><p>移除之前必须关闭. 否则会在框架内崩溃.</p></blockquote><h3 id="RTCDataChannel坑"><a href="#RTCDataChannel坑" class="headerlink" title="RTCDataChannel坑"></a>RTCDataChannel坑</h3><blockquote><p>刚接触RTCDataChannel 的时候, 运行别人的Demo, 发现一个问题**. 发起者发起, 接受者接受, 成功, DataChannel 开启成功, 发起者可以发送, 接受者可以收到反之则不行. <strong>经过测试安卓和iOS都出现了这个问题(自己跟自己测试, 即iOS-&gt;iOS, Android-&gt;Android).有意思的是, 安卓和iOS可以. 经过对比iOS采用双方都采用初始化赋值给</strong>全局变量**. 安卓采用都采用初始化后不赋值方式, 在协议回调中赋值给全局变量的方式,<strong>随之改为全部初始化, 但是接收端在协议回调中重新再次赋值一次, 发起端不赋值的方式</strong>, DataChannel 可以使用. 原因不明.如有知道的请告知.</p></blockquote><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-comment">//创建方式不变 在RTCPeerConnectionDelegate代理中重新再次赋值一次</span><br>- (void)peerConnection:(RTCPeerConnection *)peerConnection<br>    didOpenDataChannel:(RTCDataChannel *)dataChannel &#123;<br>    dispatch_async_on_main_queue(^&#123;<br>        DSpersonKitLog(@<span class="hljs-string">&quot;RTCDataChannel 通道已经打开&quot;</span>);<br>        <span class="hljs-comment">//发起者和接受者都需要创建, 但是接受者需要在通道打开的时候重新赋值一次, 原因不明</span><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">_isInititor</span>) &#123;<br>            <span class="hljs-variable">_dataChannel</span> = dataChannel;<br>            <span class="hljs-variable">_dataChannel</span>.delegate = self;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><a href="http://www.52im.net/thread-1020-1-1.html">此问题我在52im中的说明和询问</a></li></ol><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><ol><li>根据测试. 创建sdp 等方法必须在主线程内调用. 否则代理不执行. 在回调中使用异步线程无所谓.</li><li>如果你在调用此方法时候.,即未使用我使用的方法创建摄像头的方法. 崩溃了在框架中. 网上的解决方法为在主线程内创建. 还是出现崩溃的解决方法.将_factory 的创建由单例移到AppDelegate中创建具体原因不明.(我找了2天/(ㄒoㄒ)/~~)<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">RTCVideoSource *videoSource = [_<span class="hljs-keyword">factory</span> videoSourceWithCapturer:capturer constraints:mediaConstraints];<br></code></pre></td></tr></table></figure></li><li>RTCDataChannel 坑问题(在👆)</li><li>如果你出现了崩溃并且找不到原因, 记得看一看是不是未调用<code>close</code> .却移除了缓存<figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sqf">- (void)close &#123;<br>    [<span class="hljs-variable">_peerConnection</span> close];<br>    <span class="hljs-variable">_peerConnection</span> = <span class="hljs-literal">nil</span>;<br>    <span class="hljs-variable">_peerConnection</span> = NULL;<br>    <span class="hljs-variable">_state</span> = kDSP2PStateDisconnect;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">_dataChannel</span>) &#123;<span class="hljs-comment">//视频的时候不存在_dataChannel</span><br>        return;<br>    &#125;<br>    [<span class="hljs-variable">_dataChannel</span> close];<br>    <span class="hljs-variable">_dataChannel</span> = <span class="hljs-literal">nil</span>;<br>    <span class="hljs-variable">_dataChannel</span> = NULL;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1></li><li> <code>self.source</code> //创建的时候使用默认, 如果通道打通后可以提升清晰度清晰度. 如果直接使用高清晰度,打洞速度会非常慢.  默认创建的视频大小为<code>480X640</code><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-comment">//切换摄像头清晰度</span><br><span class="hljs-keyword">self</span>.source.captureSession.sessionPreset = <span class="hljs-built_in">AVCaptureSessionPreset1280x720</span>;<br></code></pre></td></tr></table></figure></li><li>创建音视频的时候, 不建议打开<code>RTCDataChannel</code>, 会影响打洞速度.<h1 id="最大问题"><a href="#最大问题" class="headerlink" title="最大问题"></a>最大问题</h1><blockquote><p>截止于2017.9.29日 仍然未解决. 发送视频的时候, iOS和iOS之间视频界面无卡顿问题. 但是和安卓之间. 打通后不久界面就会卡住. 至今原因不明. 后切换发现视频流应该是不传送了 .因为界面会黑屏. 如果您知道原因请联系我. 谢谢QQ/微信 576895195</p></blockquote></li></ol><blockquote><p>因为项目不是我的…. 就不拿出来了. <a href="https://github.com/ISBX/apprtc-ios">有一个Demo是不错的</a>. 采用WebSocket和Http方式交换信息</p></blockquote><blockquote><p>特别感谢<a href="http://www.jianshu.com/p/c49da1d93df4">@涂耀辉</a>大婶分享的这篇入门教程<br> <a href="https://github.com/DSPerson/WebRTCMacFramework">自己编译的 MacOS WebRTC Framework</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac 上搭建MySQL总结</title>
    <link href="DSPerson.github.io/2017/03/01/MacMysql/"/>
    <url>DSPerson.github.io/2017/03/01/MacMysql/</url>
    
    <content type="html"><![CDATA[<blockquote><p>早期记录  Mac 上搭建MySQL</p></blockquote><span id="more"></span><blockquote><p>使用<code>Homebrew</code> 搭建<code>MySQL </code>是非常稳妥，因为墙的原因可能速度较慢一些，如果使用梯子可能会很快(比如我)。下面看到我写分号的你也得记得写上。</p></blockquote><p> 第一步执行</p><pre><code>brew install mysql</code></pre><p>之后就是等待了建议翻墙速度汇款很多因为内容较大 400多M</p><p>启动服务器</p><pre><code>base mysql.server start</code></pre><p> 第二步 进入Mysql</p><pre><code>mysql -uroot -p</code></pre><p>此处会让你输入密码 记得 直接回车！！！直接回车！！！直接回车！！！我在这个地方耽误不少时间</p><pre><code>             此处应该有一个成功的图片             /-------------------\</code></pre><p><img src="/blog/img/MacMysql/success.png" alt="此处应该有一个成功的图片"></p><hr><p>查看当前数据库</p><pre><code>show databases;    </code></pre><p><img src="/blog/img/MacMysql/show_one.png"></p><p>第三步设置密码<br>此处如果直接设置会提示你选用那个数据库 可以用命令行创建一个自己的数据库不要动它自带的数据库，以免出现错误。</p><p>先创建一个新的数据库</p><pre><code>create databases DS;</code></pre><p><img src="/blog/img/MacMysql/show_2.png"></p><p>如果不想错的话就把分号加上吧 当然你复制下来最好<code>DS</code>数据库名字随便改别重复就行。。。</p><pre><code>use DS;</code></pre><p>设置密码</p><pre><code>set password=password(&#39;xxxxxx&#39;)</code></pre><p>xxxx即密码</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS内购买IAP和服务器交互问题</title>
    <link href="DSPerson.github.io/2017/02/19/OC-IAP/"/>
    <url>DSPerson.github.io/2017/02/19/OC-IAP/</url>
    
    <content type="html"><![CDATA[<blockquote><p>早期同时兼顾 iOS和PHP任务功能记录</p></blockquote><span id="more"></span><blockquote><p>warning 此处不讲解IA如何P配置了，网上挺全面的而且还写的都不错的。但是前提是你有沙盒测试账号和itunesconnect设置过了内购买所需虚拟物品和银行协议的一堆配置<br>此处只讲解两点</p><ul><li>我碰见的问题</li><li>和服务器的交互问题(此处以PHP为例子，本人PHP刚入门也是copy来的，根据自己的需求做出小小改变)</li></ul></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="配置消耗型物品重复购买却显示此项目免费恢复"><a href="#配置消耗型物品重复购买却显示此项目免费恢复" class="headerlink" title="配置消耗型物品重复购买却显示此项目免费恢复"></a>配置消耗型物品重复购买却显示此项目免费恢复</h3><ul><li><p>需要在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs objectivec?linenums">- (void)paymentQueue:(SKPaymentQueue *)queue updatedTransactions:(NSArray&lt;SKPaymentTransaction *&gt; *)transactions<br></code></pre></td></tr></table></figure></li><li><p>的每个状态后面都需要添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs objectivec?linenums">[[SKPaymentQueue defaultQueue] finishTransaction:tran];<br></code></pre></td></tr></table></figure><h2 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h2><h3 id="先解释一下OC代码和PHP代码"><a href="#先解释一下OC代码和PHP代码" class="headerlink" title="先解释一下OC代码和PHP代码"></a>先解释一下OC代码和PHP代码</h3><blockquote><p>第一步拾掇拾掇需要的东西</p></blockquote></li></ul><ul><li>#import &lt;StoreKit/StoreKit.h&gt;</li><li>&lt;SKPaymentTransactionObserver, SKProductsRequestDelegate&gt; 两个协议方法你也得实现吧<blockquote><p>第二步注册观察者，并且判断该用户能否使用内购买</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs objectivec?linenums">[[SKPaymentQueue defaultQueue] addTransactionObserver:self];<br>            if([SKPaymentQueue canMakePayments])&#123;<br>                weakSelf.currentProId         = productID;<br>                [weakSelf requestProductData:productID];<br>            &#125;else&#123;<br>                UIAlertView *alerView         = [[UIAlertView alloc] initWithTitle:@&quot;提示&quot;<br>                                                                           message:@&quot;您的手机没有打开程序内付费购买&quot;<br>                                                                          delegate:self cancelButtonTitle:NSLocalizedString(@&quot;关闭&quot;,nil) otherButtonTitles:NSLocalizedString(@&quot;提示&quot;,nil), nil];     <br>                [alerView show];<br>            &#125;<br></code></pre></td></tr></table></figure><blockquote><p>第三步查询 =&gt; 你传一个你在itunesconnect 中App中定义的内购买Product_ID<br><img src="/blog/img/OC-IAP/itunesconntent.png" alt="我是图"></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs objectivec?linenums">NSArray *product = [[NSArray alloc] initWithObjects:type, nil];<br>NSSet *nsset = [NSSet setWithArray:product];<br>// 请求动作<br>SKProductsRequest *request = [[SKProductsRequest alloc] initWithProductIdentifiers:nsset];<br>request.delegate = self;<br>[request start];<br></code></pre></td></tr></table></figure><blockquote><p>第四步 收到你在itunesconnect 中定义的Product_ID的详细数据,顺便把购买请求发送了()</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs objectivec?linenums">- (void)productsRequest:(SKProductsRequest *)request didReceiveResponse:(SKProductsResponse *)response &#123;<br>    NSLog(@&quot;--------------收到产品反馈消息---------------------&quot;);<br>    NSArray *product              = response.products;<br>    if([product count] == 0)&#123;<br>        //[SVProgressHUD dismiss];<br>        NSLog(@&quot;--------------没有商品------------------&quot;);<br>        return;<br>    &#125;<br>    <br>    NSLog(@&quot;productID:%@&quot;, response.invalidProductIdentifiers);<br>    NSLog(@&quot;产品付费数量:%lu&quot;,(unsigned long)[product count]);<br>    <br>    SKProduct *p                  = nil;<br>    for (SKProduct *pro in product) &#123;<br>        NSLog(@&quot;%@&quot;, [pro description]);<br>        NSLog(@&quot;%@&quot;, [pro localizedTitle]);<br>        NSLog(@&quot;%@&quot;, [pro localizedDescription]);<br>        NSLog(@&quot;%@&quot;, [pro price]);<br>        NSLog(@&quot;%@&quot;, [pro productIdentifier]);<br>        <br>        if([pro.productIdentifier isEqualToString:_currentProId])&#123;<br>            p                             = pro;<br>        &#125;<br>    &#125;<br>    <br>    SKPayment *payment            = [SKPayment paymentWithProduct:p];<br>    NSLog(@&quot;发送购买请求&quot;);<br>    [[SKPaymentQueue defaultQueue] addPayment:payment];<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>第五步收到信息给你返回数据了</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs objectivec?linenums">- (void)paymentQueue:(SKPaymentQueue *)queue updatedTransactions:(NSArray&lt;SKPaymentTransaction *&gt; *)transactions &#123;<br>    for(SKPaymentTransaction *tran in transactions)&#123;<br>        <br>        switch (tran.transactionState) &#123;<br>            case SKPaymentTransactionStatePurchased:&#123;<br>                NSLog(@&quot;交易完成&quot;);<br>                //方法在下面<br>                [self completeTransaction:tran];<br>            &#125;<br>                break;<br>            case SKPaymentTransactionStatePurchasing:<br>                NSLog(@&quot;商品添加进列表&quot;);<br>                <br>                break;<br>            case SKPaymentTransactionStateRestored:&#123;<br>                NSLog(@&quot;已经购买过商品&quot;);<br>                <br>                [[SKPaymentQueue defaultQueue] finishTransaction:tran];<br>            &#125;<br>                break;<br>            case SKPaymentTransactionStateFailed:&#123;<br>                NSLog(@&quot;交易失败&quot;);<br>                [[SKPaymentQueue defaultQueue] finishTransaction:tran];<br>              //  [SVProgressHUD showErrorWithStatus:@&quot;购买失败&quot;];<br>                startConntentService = false;<br>            &#125;<br>                break;<br>            default:<br>                break;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>此处是最后的方法还有我和服务器交互的地方，但是此处我也不懂为什么这个方法会调用两次如果您明白，请在下面留言告诉我谢谢，所以我此处加了一个全局的判断，来约束它和服务器交互的次数。<br>！！！看好我发送数据请求的方法其实就是AFNetworing的封装，都会用对吧。。。网址看好，别光顾着复制哦</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs objectivec?linenums">- (void)completeTransaction:(SKPaymentTransaction *)transaction &#123;<br>    NSLog(@&quot;交易结束&quot;);<br>    [SVProgressHUD dismiss];<br>    <br>    NSURL *receiptURL             = [[NSBundle mainBundle] appStoreReceiptURL];<br>    NSData *receipt               = [NSData dataWithContentsOfURL:receiptURL];<br>    if (!receipt) &#123; /* No local receipt -- handle the error. */ &#125;<br>    //因为此处可能会多次调用原因不明所以加判断只调用一次<br>    else if (receipt &amp;&amp; startConntentService) &#123;<br>        /**<br>                  服务器要做的事情:<br>                  接收ios端发过来的购买凭证。<br>                  判断凭证是否已经存在或验证过，然后存储该凭证。<br>                  将该凭证发送到苹果的服务器验证，并将验证结果返回给客户端。<br>                  如果需要，修改用户相应的会员权限<br>                 */<br>        startConntentService = false;<br>        //字典中第二个参数是为了debug准备的，正常你不用写<br>        NSDictionary *requestContents = @&#123;<br>                                          @&quot;receipt-data&quot;: [receipt base64EncodedStringWithOptions:0],<br>                                          @&quot;XDEBUG_SESSION_START&quot;:@&quot;12477&quot;<br>                                          &#125;;<br>        [HTTPClient postWithURLString:@&quot;你的后台网址&quot; parameters:requestContents success:^(id returnValue) &#123;<br>            id name                       = returnValue;<br>            <br>        &#125; failure:^(id failureValue) &#123;<br>            <br>        &#125;];<br>    &#125;<br>    //这个千万别忘了 ，要不你就会犯第一条问题(配置消耗型物品重复购买却显示此项目免费恢复)<br>    [[SKPaymentQueue defaultQueue] finishTransaction:transaction];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="下面是PHP代码，我用的是ThinkPHP框架-会php都会框架，像我只会框架暂时还不会php-咳咳…"><a href="#下面是PHP代码，我用的是ThinkPHP框架-会php都会框架，像我只会框架暂时还不会php-咳咳…" class="headerlink" title="下面是PHP代码，我用的是ThinkPHP框架(会php都会框架，像我只会框架暂时还不会php.咳咳…)"></a>下面是PHP代码，我用的是ThinkPHP框架(会php都会框架，像我只会框架暂时还不会php.咳咳…)</h3><blockquote><p>只有两个方法<br>1 外部调用的方法，此处我的逻辑都系在了Controller中，是为了大家方便，我建议还是写在Model中(MVC哦，其实感觉都一样哈哈)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php?linenums">public function iosIAPPay() &#123;<br><br>        $status = array(&#x27;status&#x27;=&gt;-1);<br>        //获取 App 发送过来的数据,设置时候是沙盒状态<br>        $receipt   = $_POST[&#x27;receipt-data&#x27;];<br>        $isSandbox = true;<br>        //开始执行验证<br>        try<br>        &#123;<br>            $info = $this-&gt;getReceiptData($receipt, $isSandbox);<br>            // 通过product_id 来判断是下载哪个资源<br>            switch($info[&#x27;product_id&#x27;])&#123;<br>                case &#x27;你的Product_ID&#x27;:<br>                    $status[&#x27;status&#x27;] = 1;<br>                    Header(&quot;Location:xxxx.zip&quot;);<br>                    break;<br>            &#125;<br>            return $status;<br>        &#125;<br>            //捕获异常<br>        catch(\Exception $e)<br>        &#123;<br>            $this-&gt;ajaxReturn($status);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs php?linenums">//服务器二次验证代码<br>    function getReceiptData($receipt, $isSandbox = false)<br>    &#123;<br>        if ($isSandbox) &#123;<br>            $endpoint = &#x27;https://sandbox.itunes.apple.com/verifyReceipt&#x27;;<br>        &#125;<br>        else &#123;<br>            $endpoint = &#x27;https://buy.itunes.apple.com/verifyReceipt&#x27;;<br>        &#125;<br><br>        $postData = json_encode(array(&quot;receipt-data&quot; =&gt; $receipt));;<br><br>        $ch = curl_init($endpoint);<br>        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);<br>        curl_setopt($ch, CURLOPT_POST, true);<br>        curl_setopt($ch, CURLOPT_POSTFIELDS, $postData);<br>        curl_setopt ($ch, CURLOPT_SSL_VERIFYPEER, 0);  //这两行一定要加，不加会报SSL 错误<br>        curl_setopt ($ch, CURLOPT_SSL_VERIFYHOST, 0);<br><br><br>        $response = curl_exec($ch);<br>        $errno    = curl_errno($ch);<br>        $errmsg   = curl_error($ch);<br>        curl_close($ch);<br>        //判断时候出错，抛出异常<br>        if ($errno != 0) &#123;<br>            throw new \Exception($errmsg, $errno);<br>        &#125;<br><br>        $data = json_decode($response);<br>        //此处是看到先人们的指导，又看到apple的官方说法改的。否则会审核不过貌似是审核也会走沙盒测试者，<br>        //此处先判断一次返回的status是否=21007 这数据是从测试环境，但它发送到生产环境中进行验证。它发送到测试环境来代替。<br>        if ($data-&gt;status == 21007) &#123;<br>            $this-&gt;getReceiptData($receipt,true);<br>            return;<br>        &#125;<br>        //判断返回的数据是否是对象<br>        if (!is_object($data)) &#123;<br>            throw new \Exception(&#x27;Invalid response data&#x27;);<br>        &#125;<br>        //判断购买时候成功<br>        if (!isset($data-&gt;status) || $data-&gt;status != 0) &#123;<br>            throw new \Exception(&#x27;Invalid receipt&#x27;);<br>        &#125;<br>         $in_app = $data-&gt;receipt-&gt;in_app;<br>        //返回产品的信息<br>        <br>         $status[&#x27;data&#x27;] = array(<br>            &#x27;quantity&#x27; =&gt; $in_app-&gt;quantity,<br>            &#x27;product_id&#x27; =&gt; $in_app-&gt;product_id,<br>            &#x27;transaction_id&#x27; =&gt; $in_app-&gt;transaction_id,<br>            &#x27;purchase_date&#x27; =&gt; $in_app-&gt;purchase_date,<br>            &#x27;app_item_id&#x27; =&gt; $data-&gt;receipt-&gt;app_item_id,<br>        );<br>        return(<br>            $status;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>我一直都困在和后台交互的时候苹果返回的数据中status=21002,哭死。。。因为status=0才是购买成功.</p><ul><li>OC中将苹果所需的凭证其实就是</li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs objectivec?linenums">NSData *receipt               = [NSData dataWithContentsOfURL:receiptURL];<br></code></pre></td></tr></table></figure><blockquote><p>base64EncodedStringWithOptions一次<br>在PHP在将这个数据json_encode(array(“receipt-data” =&gt; $receipt));一次在传给苹果服务器，自己写百度谷歌一起来真心好难。<br>一遍一遍的改OC和PHP代码，还好公司太小两个都是我在做，我有大把时间和不用麻烦别人。</p></blockquote><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><blockquote><p>帮大家理理思路也是我目前知道的最好的app和服务器交互的方法：<br>在支付之前在后台服务器记录一次你的数据，包括product_id，之后才开始去支付支付成功后再和服务器进行比对product_id可以预防app本地破解支付和防止用户篡改(比如他买的518却只支付6块)等.<br>还有就是漏单问题，就是用户买东西成功了，但是和自己服务器交互出现了意外(不会怀孕)，我现在并未尝试但觉得可行(在更新这个博客之前，因为今天周五要回家了所以下周测试)，就是讲xcode的凭证保存到本地，这样用户就可以自己重新点击一次，在和服务器交互一次，将虚拟物品重新不给他一次。</p></blockquote></li></ul><p>参考:</p><blockquote><p><a href="http://www.jianshu.com/p/e9ae4cece800">应用内支付IAP全部流程</a><br><a href="http://www.jianshu.com/p/86ac7d3b593a">iOS开发内购全套图文教程</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>IAP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回首2016，展望2017</title>
    <link href="DSPerson.github.io/2017/02/10/talkIsCheap/"/>
    <url>DSPerson.github.io/2017/02/10/talkIsCheap/</url>
    
    <content type="html"><![CDATA[<blockquote><p>2016年第一次闲聊记录</p></blockquote><span id="more"></span><h3 id="2016年记录"><a href="#2016年记录" class="headerlink" title="2016年记录"></a>2016年记录</h3><blockquote><p>2016年是iOS 市场崩溃的一年，15年踏入这个行列中，在16年差点被挤死，还好我挺了过来。</p></blockquote><blockquote><p>我在我第一家公司呆了一年多，没想到(也不能说想到，只不过不想去想)我成功了把它干黄了，也是挺骄傲的，毕竟挺不容易的，但是欠我的两个月工资还没给，估计就得17年仲裁了，17年第一件展望的事情出来了。</p></blockquote><blockquote><p>16年学到了很多，ReactNative火了一把，我也跟着蹭了一把。用PHP学过后台，也算走到了IT领域的后方(可惜不太合格)。</p></blockquote><blockquote><p>17年展望,也算是16年给自己找了个奔头，不知道能不能成功，自己做个小项目看看能不能挖到传说中的第一桶金，应该是和我女朋友配合一下共同完成，但是截至目前为止是我一个人在搭建后台，等差不多了在开始App方向的搭建。</p></blockquote><p>于2017年2月4日 —&gt; <del>第一桶金(没挣到)</del>靠头发娶我女朋友</p><h4 id="2021年更新"><a href="#2021年更新" class="headerlink" title="2021年更新"></a>2021年更新</h4><blockquote><p>10年长跑我和我媳妇于2011年10.7日在一起、2021年1月3日结婚，完成了在2017年的承诺。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>夜晚</category>
      
    </categories>
    
    
    <tags>
      
      <tag>闲聊</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
